---
description: 
globs: 
alwaysApply: true
---
以下は今回検討した内容をもとにまとめたシステム概要設計書です。

以下のように、外部ソース取込と Gmail トリガーを含めた最新仕様に更新しました。Notion に貼り付けても見出し・リスト・コードブロックが崩れずそのまま使えます。

## 1. 目的・背景

### 1.1 手動フローの課題
- Substack → ファイルDL → Voicy アップロードを手作業で実施  
- 作業工数が煩雑、ヒューマンエラー発生のリスク大  
- 配信プラットフォームが増えるたびに手順が増加  

### 1.2 システム化のゴール
- **一気通貫自動化**：ブラウザ録音 & 外部録音データ取込から Voicy 等への配信まで完全自動化  
- **プラグイン拡張**：文字起こし／要約／記事自動生成を後付け可能なマイクロサービス化  
- **サーバーレス＋マネージド中心**：インフラ運用コスト & 手間を最小化  

---

## 2. 全体アーキテクチャ

```text
[ブラウザ (PWA)]
  └─ 録音コンポーネント ──▶ Supabase Storage (音声ファイル)
                                  │
                         Webhook 通知 (録音完了)
                                  ▼
[メール受信 (Gmail API / Apps Script)]──┐
[Cron (Vercel)]  ────────────────┼─▶ /api/check_email (Python) ─▶ /api/start_poll
                                  │
                       Vercel Function (Node.js)
                                  │
                                  ▼
                     Browserless.io API (Playwright)
                                  │
                                  ▼
                              Voicy 操作
                                  │
                                  ▼
                    Postgres (ジョブステータス管理)

2.1 フロントエンド（PWA）
	•	Web Audio API / RecordRTC で録音・波形プレビュー
	•	録音データを Supabase Storage に直接アップ
	•	録音済み・取込済みファイルのステータス一覧をリアルタイム表示

2.2 外部取込トリガー
	•	メール通知経由
	•	Gmail API プッシュ通知 (Pub/Sub)／Google Apps Script で新着ライブ通知を検知
	•	Vercel Cron（Python）で未読メールを定期チェック
	•	フォールバック定周期ポーリング
	•	5 分〜15 分間隔で Substack ページをスクレイピング／非公開API呼び出し

2.3 バックエンド（サーバーレス関数）
	•	Vercel Functions（Node.js）
	•	Supabase Webhook → 自動化ジョブ投入
	•	/api/check_email.py (Python) で Gmail 受信 → 自動化エンドポイント呼び出し
	•	ジョブ結果を Postgres に記録、フロントへ WebSocket/メール通知

2.4 自動化エンジン
	•	Browserless.io の REST API 経由で Playwright を実行
	•	Voicy へのログイン・ファイルアップロードを自動化
	•	Cookie / storageState で認証情報を永続化

⸻

3. コンポーネント詳細設計

3.1 録音コンポーネント
	•	機能：録音開始・停止、波形プレビュー、不要区間カット
	•	ライブラリ：Web Audio API + MediaRecorder / RecordRTC
	•	出力：onRecorded(blob: Blob, metadata: RecordMetadata) コールバック

3.2 ファイル管理 UI
	•	録音済み/取込済みファイル一覧 (サムネイル、タイムスタンプ)
	•	ステータス表示 (未処理 / 処理中 / 完了 / エラー)
	•	再試行・削除ボタン

3.3 メール受信／Cron チェック
	•	/api/check_email.py (Python)
	•	Gmail API で未読ライブ通知メールを検索
	•	条件一致時に /api/start_poll 呼び出し
	•	既読フラグを付与
	•	Vercel Cron 設定で 1～5 分間隔実行

3.4 ポーリングオーケストレータ
	•	/api/start_poll で 20–30 秒間隔ポーリングを開始
	•	ライブ終了検知 → 音声ファイルの DL & コア取込

3.5 ジョブ管理・通知
	•	Postgres テーブル：jobs(id, user_id, file_url, status, started_at, finished_at, error_message)
	•	リアルタイム通知：Supabase Realtime / Next.js + WebSocket
	•	メール通知：SendGrid / SES など

3.6 プラグイン層
	•	文字起こし / 要約 / 記事生成をサーバーレス関数で提供
	•	各プラグインは独立エンドポイント /api/plugins/…
	•	ジョブ完了時にプラグインチェーンで自動呼び出し

⸻

4. 技術スタック

層	技術・サービス
フロント	Next.js (React) + Tailwind CSS
録音 / プレビュー	Web Audio API + MediaRecorder / RecordRTC
認証・DB・Storage	Supabase (Auth, Postgres, Storage)
サーバーレス	Vercel Functions (Node.js) / AWS Lambda + API Gateway
自動化エンジン	Browserless.io (Playwright)
メール受信	Gmail API (Pub/Sub) / Google Apps Script / Vercel Cron (Python)
CI/CD	GitHub Actions → Vercel 自動デプロイ


⸻

5. デプロイ・運用フロー
	1.	GitHub プッシュ → GitHub Actions でテスト・Lint → Vercel 自動デプロイ
	2.	Supabase コンソールでテーブル・Storage 管理
	3.	Vercel Cron で /api/check_email.py を定期実行
	4.	Browserless.io ダッシュボードで自動化ログ監視

⸻

6. セキュリティ・運用上の注意
	•	認証：Supabase Auth / Gmail API 認証情報は環境変数で厳格管理
	•	API シークレット：Vercel Secrets / AWS Secrets Manager で保護
	•	CORS：必要最小限のオリジンのみ許可
	•	メール設定：Gmail API 用サービスアカウント＋Pub/Sub は最小権限設定

⸻

7. 今後の拡張計画
	•	文字起こしプラグイン：OpenAI Whisper API 連携
	•	記事生成プラグイン：GPT 系モデルによるドラフト生成
	•	多配信対応：Spotify / YouTube Live など他プラットフォーム取込機能追加
	•	管理ダッシュボード：KPI 可視化 & ジョブ統計

⸻

ディレクトリ構造サンプル

/
├── .github/workflows/ci.yml
├── public/
│   ├── icons/
│   └── manifest.json
├── src/
│   ├── pages/
│   │   ├── index.tsx
│   │   ├── api/
│   │   │   ├── recorded.ts
│   │   │   ├── jobs.ts
│   │   │   ├── check_email.py    # Gmail/Cron トリガ関数
│   │   │   └── start_poll.ts     # ポーリング開始エンドポイント
│   │   └── plugins/
│   │       ├── transcribe.ts
│   │       └── summarize.ts
│   ├── components/
│   │   ├── Recording/
│   │   │   ├── Recording.tsx
│   │   │   └── Recording.module.css
│   │   └── FileList.tsx
│   ├── lib/
│   │   ├── supabaseClient.ts
│   │   └── browserlessClient.ts
│   ├── hooks/
│   ├── contexts/
│   └── config/
├── migrations/20250610_create_jobs_table.sql
├── tests/
├── cursorrules.yaml
├── next.config.js
├── tsconfig.json
├── package.json
├── tailwind.config.js
├── .env.example
└── README.md

